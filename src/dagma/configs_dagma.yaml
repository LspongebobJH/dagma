n : 2000
d: 20
s0: 120 # following dagma, better be 4 * d
graph_type : ER
sem_type : gauss
est_type : tau+ # [tau, tau+]
fdr : 0.2
device : 7
numeric: False # let values < numeric_precision be 0.
numeric_precision : 1e-1
device : cuda:7
root_path: simulated_data
dagma_type: dagma_1
knock_type: knockoff_diagn

# True: t_list = concat([0], sort.unique.abs(Z))
# False: t_list = sort.concat([0], unique(Z))
# change little, should be True as
## negatives of Z will affect denorminator
abs_t_list : True

# True : mask = (np.abs(Z) >= t_last)
# False : mask = (Z >= t_last)
# change little, should be False
## negative parts are usually too small (< selected threshold)
abs_selection : False

# dag_1: first remove Z from min to max, until dag, then fdr control filter
# dag_2: first include Z from max to min, until not dag, then fdr control filter

# dag_3: first compute fdr control z and q-value matrix Q, then remove Z from min to max until dag.
## it's obvious max(dag(Z), fdr(Z)) will be chosen. 
## if dag_control is excuted only when fdr(Z)-filtered graph is not dag, the dag(Z) must be chosen.
# dag_4: first compute fdr control z and q-value matrix Q, then include Z from max to min until not dag.

# dag_5: first compute fdr control z and q-value matrix Q, then remove Q from max to min until dag.
## in this case, no selected threshold.
# dag_6: first compute fdr control z and q-value matrix Q, then include Q from min to max until not dag.

# dag_7: first remove |W| from min to max, until dag, then fdr control filter
dag_control : None

# control_type
## type_3_control: column-wise model-x 
## type_3_control_global: global model-x
## type_4_control: column-wise model-x + dag_control
## type_4_control: global model-x + dag_control
### if dag_control == None, type_4_control(_global) == type_3_control(_global)

##############################
# testing tricks for 
# FDR control
##############################

trick: None ## trick only for type_3_global now
# Lets Z(i, j) be |W_i| - |W_j|
# the resulted Z(11, 21) (or denoted by Z) is calibrated by
# trick_1: Z <- Z - Z(12, 22)
# trick_2: Z <- Z - Z(21, 22)
# trick_3 (work): Z <- Z - Z(12, 22) + Z(11, 22)
# trick_3_1 (work): simplify trick_3, Z - Z(12, 22) + Z(11, 22) = Z(11, 12) + Z(11, 21) = 2|W_11| - |W_21| - |W_12|

########### trick_4, 5, 6 ############
# since trick_3_1 is very much like
# the fdr control formula of deeprock
# hence test some similar formula
######################################
# trick_4: Z <- Z(11, 22), like T - DD
# trick_5: (a modification of trick_6) Z <- |W12| + |W21| - |W22|, like D - DD
# trick_6: |W12| + |W21| - 2|W22|, like D - 2 * DD


########### trick_7 ##################
# trick_7 is a part of trick_3
# since Z(11, 21) cannot control
# and trick_3 can control, I try
# whether Z(11, 21) can control.
######################################
# trick_7 (work but low power): Z <- Z(11, 12) = |W11| - |W12|

# trick_8: Z <- Z(11, 21) - Z(21, 22) = |W11| + |W22| - 2|W21|


##############################
# knockoffDiagn parameters
##############################

disable_adjust_marg: False
method_diagn_gen: dagma # which method to generate X_pred, used in X' = X_pred + shuffle(X - X_pred).
# can be ['dagma', 'lasso'], the latter one is original knockoffdiagn
lasso_alpha: knockoff_diagn # available only when method_diagn_gen == lasso. this is the alpha of l1 norm. 
# when knockoff_diagn, using the default values calculated by knockoffDiagn.
# when sklearn, using the default values set by sklearn

##############################
# DAGMA parameters
##############################

norm_DAGMA: False
warm_iter: 50000
use_g_dir_loss: False
T: 4
disable_block_diag_removal: False

##############################
# DEPRECATED
##############################


##############################
# knockoffGAN parameters
##############################

niter: 2000
norm_knockoffGAN: False

##############################
# both
# deconv in dagma
# and
# deconv after dagma
# params
##############################

order: 5 
# order
## when used in deconv in dagma 
## only valid when deconv_type_dagma == deconv_1 or deconv_4_1
## when used in deconv after dagma
## only valid when deconv_type == deconv_2
alpha: 1. # high order decay
# alpha
## when used in deconv in dagma
## only valid when deconv_type_dagma == deconv_4_1 and deconv_4_2
## note that deconv_1, deconv_2 can also use alpha, but not implemented yet
## when used in deconv after dagma
## only valud when deconv_type == deconv_2
## note that deconv_1 can also use alpha, but not implemented yet


##############################
# deconv in dagma params
##############################

deconv_type_dagma: None
# deconv_1: directly learn W + W^2 + ... W^ord
# deconv_2: normalize W to make it converge under power series (I + W + W^2 + ... W^inf) - I
# deconv_3 (deprecated): indeed no deconv. learn min || X - X(W1 - W2) ||, s.t. h(W1 - W2) = 0, where W1 and W2 > 0
## deconv_3 uses Wi = Wi' * Wi' to induce non-negativity
## deconv_3 has worse performance than deconv_4, hence deprecated.
# deconv_4: similar to deconv_3, but uses projective gradient descent
# deconv_4_1: based on deconv_4, use forward deconv to learn 
## min || X - XW' ||, s.t. h(W') = 0, where W' = ( \sum a ^ {order} * (W1 ^ {order} - W2 ^ {order}) )
# deconv_4_2: based on deconv_4, use inverse deconv to learn
## min || X - XW' ||, s.t. h(W') = 0, where W' = ï¼ˆI - aW1)^{-1} - (I - aW2)^{-1}), note that -I are cancelled out.



##################################
# deconv after dagma params 
# used before fdr control
# used on learned W 
##################################

deconv_type: None
# deconv_type
## deconv_1: symmetric the DAG then use original ND to get the inverse
## deconv_2: use pytorch to learn the G_dir
beta: 0.9 # valid only when deconv_1

# valid only when deconv_2: 
clean_diag: False
order: 5
epochs: 30000
lr: 0.01
l2_w: 0.
dag_control_deconv: None
abs_gt: False # to regress |W_obs|
abs_dir: None 
# abs_dir
## "square": W_dir = W * W to make W_dir positive. 
## "proj": each iter let W[W < 0.] = 0., projective gradient descend
get_abs_dir: False # if true, take W = abs_dir(W)